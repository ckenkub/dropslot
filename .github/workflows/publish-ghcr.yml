name: Publish images to GHCR

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

jobs:
  publish:
    name: Build and push images to GHCR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Diagnostics: reveal token presence (masked)"
        env:
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "GHCR_TOKEN set: ${GHCR_TOKEN:+yes:no}"
          echo "GITHUB_TOKEN set: ${GITHUB_TOKEN:+yes:no}"
          echo "Actor: ${{ github.actor }}"
          echo "Repository owner: ${{ github.repository_owner }}"

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Cache Maven local repo
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build & push user-service image to GHCR
        env:
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          REFNAME: ${{ github.ref_name }}
        run: |
          set -x
          # Determine a safe TAG: strip refs/* prefixes and sanitize to a docker-friendly tag
          # Handles: refs/heads/main -> main, refs/tags/v1.0 -> v1.0, and workflow_dispatch where GITHUB_REF may vary
          REF="${GITHUB_REF:-}"
          # prefer github.ref_name if present (short ref without prefixes)
          if [[ -n "${REFNAME}" ]]; then
            REF="${REFNAME}"
          fi
          # remove common prefixes if still present
          REF=${REF#refs/heads/}
          REF=${REF#refs/tags/}
          REF=${REF#refs/}
          # sanitize: replace non-alnum/._-/ with '-', collapse multiple -, lowercase
          TAG=$(echo "${REF}" | sed -E 's#[^A-Za-z0-9._/-]+#-#g' | sed -E 's#-+#-#g' | tr '/' '-' | tr '[:upper:]' '[:lower:]')
          # fallback if empty
          if [[ -z "${TAG}" ]]; then
            TAG=latest
          fi
          IMAGE=ghcr.io/${{ github.repository_owner }}/user-service:${TAG}
          mvn -X -e -B -f backend/user-service -DskipTests -Dspotless.skip=true \
            -Djib.to.image=${IMAGE} \
            -Djib.to.auth.username=${{ secrets.GHCR_USERNAME }} \
            -Djib.to.auth.password=${GHCR_TOKEN} \
            clean package jib:build || (
              echo "jib build failed, retrying with GITHUB_TOKEN fallback"
              mvn -X -e -B -f backend/user-service -DskipTests -Dspotless.skip=true \
                -Djib.to.image=${IMAGE} \
                -Djib.to.auth.username=${{ github.actor }} \
                -Djib.to.auth.password=${{ secrets.GITHUB_TOKEN }} \
                clean package jib:build
            )

      - name: Build & push store-service image to GHCR
        env:
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          REFNAME: ${{ github.ref_name }}
        run: |
          set -x
          # Determine a safe TAG: strip refs/* prefixes and sanitize to a docker-friendly tag
          REF="${GITHUB_REF:-}"
          if [[ -n "${REFNAME}" ]]; then
            REF="${REFNAME}"
          fi
          REF=${REF#refs/heads/}
          REF=${REF#refs/tags/}
          REF=${REF#refs/}
          TAG=$(echo "${REF}" | sed -E 's#[^A-Za-z0-9._/-]+#-#g' | sed -E 's#-+#-#g' | tr '/' '-' | tr '[:upper:]' '[:lower:]')
          if [[ -z "${TAG}" ]]; then
            TAG=latest
          fi
          IMAGE=ghcr.io/${{ github.repository_owner }}/store-service:${TAG}
          mvn -X -e -B -f backend/store-service -DskipTests -Dspotless.skip=true \
            -Djib.to.image=${IMAGE} \
            -Djib.to.auth.username=${{ secrets.GHCR_USERNAME }} \
            -Djib.to.auth.password=${GHCR_TOKEN} \
            clean package jib:build || (
              echo "jib build failed, retrying with GITHUB_TOKEN fallback"
              mvn -X -e -B -f backend/store-service -DskipTests -Dspotless.skip=true \
                -Djib.to.image=${IMAGE} \
                -Djib.to.auth.username=${{ github.actor }} \
                -Djib.to.auth.password=${{ secrets.GITHUB_TOKEN }} \
                clean package jib:build
            )

      - name: Upload image digests
        run: |
          echo "Publishing completed for tag ${GITHUB_REF#refs/tags/}"

  
# Notes:
# - This workflow expects a repository secret named GHCR_TOKEN with a PAT that has 'packages:write' scope
#   (you can also use GITHUB_TOKEN in many orgs; if so, set GHCR_TOKEN to the value of GITHUB_TOKEN).
# - It runs only on tag pushes (recommended). Do NOT expose GHCR_TOKEN to untrusted workflows or forks.